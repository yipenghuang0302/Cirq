# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from cirq.google.api.v2.metrics_pb2 import (
    MetricsSnapshot as cirq___google___api___v2___metrics_pb2___MetricsSnapshot,
)

from cirq.google.api.v2.program_pb2 import (
    Circuit as cirq___google___api___v2___program_pb2___Circuit,
)

from google.protobuf.descriptor import (
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class CalibrationLayerCode(int):
    DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
    @classmethod
    def Name(cls, number: int) -> str: ...
    @classmethod
    def Value(cls, name: str) -> CalibrationLayerCode: ...
    @classmethod
    def keys(cls) -> typing___List[str]: ...
    @classmethod
    def values(cls) -> typing___List[CalibrationLayerCode]: ...
    @classmethod
    def items(cls) -> typing___List[typing___Tuple[str, CalibrationLayerCode]]: ...
UNKNOWN = typing___cast(CalibrationLayerCode, 0)
SUCCESS = typing___cast(CalibrationLayerCode, 1)
ERROR_OTHER = typing___cast(CalibrationLayerCode, 2)
ERROR_INVALID_PARAMETERS = typing___cast(CalibrationLayerCode, 3)
ERROR_TIMEOUT = typing___cast(CalibrationLayerCode, 4)
ERROR_CALIBRATION_FAILED = typing___cast(CalibrationLayerCode, 5)

class FocusedCalibration(google___protobuf___message___Message):

    @property
    def layers(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[CalibrationLayer]: ...

    def __init__(self,
        layers : typing___Optional[typing___Iterable[CalibrationLayer]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> FocusedCalibration: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"layers"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[b"layers"]) -> None: ...

class CalibrationLayer(google___protobuf___message___Message):
    calibration_type = ... # type: typing___Text

    @property
    def circuit(self) -> cirq___google___api___v2___program_pb2___Circuit: ...

    def __init__(self,
        calibration_type : typing___Optional[typing___Text] = None,
        circuit : typing___Optional[cirq___google___api___v2___program_pb2___Circuit] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> CalibrationLayer: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"circuit"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"calibration_type",u"circuit"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"circuit",b"circuit"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"calibration_type",b"circuit"]) -> None: ...

class FocusedCalibrationResults(google___protobuf___message___Message):

    @property
    def results(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[CalibrationLayerResults]: ...

    def __init__(self,
        results : typing___Optional[typing___Iterable[CalibrationLayerResults]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> FocusedCalibrationResults: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"results"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[b"results"]) -> None: ...

class CalibrationLayerResults(google___protobuf___message___Message):
    code = ... # type: CalibrationLayerCode
    error_message = ... # type: typing___Text
    token = ... # type: typing___Text
    valid_until_ms = ... # type: int

    @property
    def metrics(self) -> cirq___google___api___v2___metrics_pb2___MetricsSnapshot: ...

    def __init__(self,
        code : typing___Optional[CalibrationLayerCode] = None,
        error_message : typing___Optional[typing___Text] = None,
        token : typing___Optional[typing___Text] = None,
        metrics : typing___Optional[cirq___google___api___v2___metrics_pb2___MetricsSnapshot] = None,
        valid_until_ms : typing___Optional[int] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> CalibrationLayerResults: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"metrics"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"code",u"error_message",u"metrics",u"token",u"valid_until_ms"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"metrics",b"metrics"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"code",b"error_message",b"metrics",b"token",b"valid_until_ms"]) -> None: ...
